import { Button, Field, Flex, Input, ProgressCircle } from '@chakra-ui/react'
import { FieldErrors, SubmitHandler, UseFormHandleSubmit, UseFormRegister } from 'react-hook-form'
import { Dispatch, SetStateAction } from 'react'
import {
  CWE2CVEInputType,
  NvdCveResponse,
} from '@/components/capec-to-cve-components/types.tsx'
import { UseMutationResult } from '@tanstack/react-query'
import { AxiosResponse } from 'axios'

interface CWE2CVEFormProps {
  setCVEs: Dispatch<SetStateAction<NvdCveResponse | undefined>>
  register: UseFormRegister<{ cweId: string }>
  handleSubmit: UseFormHandleSubmit<{ cweId: string }, undefined>
  errors: FieldErrors<{ cweId: string }>
  mutation: UseMutationResult<AxiosResponse<any, any>, Error, { cweId: string; page: number; }, unknown>
}

export function CWE2CVEForm({ register, handleSubmit, errors, mutation }: CWE2CVEFormProps) {

  const onSubmit: SubmitHandler<CWE2CVEInputType> = async data => {
    mutation.mutate({ cweId: data.cweId, page: 1 })
  }


  return (
    <form onSubmit={handleSubmit(onSubmit)} className="mt-3!">
      <Flex
        direction="column"
        justifyContent="center"
        gap={4}
        alignItems="center"
      >
        <Field.Root invalid={!!errors.cweId}>
          <div className="w-[250px] self-center">
            <Field.Label>CWE ID</Field.Label>

            <Input
              variant="subtle"
              type="text"
              placeholder="Пример: CWE-78"
              size="lg"
              {...register('cweId')}
            />
            <Field.ErrorText fontSize="13px">
              {errors.cweId?.message}
            </Field.ErrorText>
          </div>
        </Field.Root>

        <Button
          className="w-50"
          size="lg"
          variant="solid"
          type="submit"
          rounded="lg"
        >
          Запустить
          {mutation.isPending && (
            <ProgressCircle.Root value={null} size="xs">
              <ProgressCircle.Circle css={{ '--thickness': '3px' }}>
                <ProgressCircle.Track />
                <ProgressCircle.Range />
              </ProgressCircle.Circle>
            </ProgressCircle.Root>
          )}
        </Button>
      </Flex>
    </form>
  )
}
