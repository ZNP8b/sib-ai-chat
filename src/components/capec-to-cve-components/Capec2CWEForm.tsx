import { Button, Field, Flex, Input, ProgressCircle } from '@chakra-ui/react'
import { api } from '@/api/api.ts'
import { useMutation } from '@tanstack/react-query'
import * as yup from 'yup'
import { SubmitHandler, useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import { Dispatch, SetStateAction } from 'react'
import { Capec2CWEInputType } from '@/components/capec-to-cve-components/types.tsx'

interface Capec2CWEFormProps {
  setCWEIds: Dispatch<SetStateAction<string[]>>
}

export function Capec2CWEForm({ setCWEIds }: Capec2CWEFormProps) {
  const schema = yup
    .object({
      capecId: yup.string().required('Это поле обязательно для заполнения'),
    })
    .required()

  const onSubmit: SubmitHandler<Capec2CWEInputType> = async data => {
    mutation.mutate(data.capecId)
  }

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm({
    resolver: yupResolver(schema),
  })

  const mutation = useMutation({
    mutationFn: (capecId: string) => {
      return api.post('/get_cwe', { capec_id: capecId })
    },
    onSuccess: data => {
      setCWEIds(data.data.cwe_ids)
    },
    onError: () => {
      setError('capecId', {
        type: 'custom',
        message: 'Произошла неизвестная ошибка.',
      })
    },
  })

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Flex
        direction='column'
        justifyContent='center'
        gap={4}
        alignItems='center'
      >
        <Field.Root invalid={!!errors.capecId}>
          <div className='w-[250px] self-center'>
            <Field.Label>CAPEC ID</Field.Label>

            <Input
              variant='subtle'
              type='text'
              placeholder='Пример: CAPEC-137'
              size='lg'
              {...register('capecId')}
            />
            <Field.ErrorText fontSize='13px'>
              {errors.capecId?.message}
            </Field.ErrorText>
          </div>
        </Field.Root>

        <Button
          className='w-50'
          size='lg'
          variant='solid'
          type='submit'
          rounded='lg'
        >
          Запустить
          {mutation.isPending && (
            <ProgressCircle.Root value={null} size='xs'>
              <ProgressCircle.Circle css={{ '--thickness': '3px' }}>
                <ProgressCircle.Track />
                <ProgressCircle.Range />
              </ProgressCircle.Circle>
            </ProgressCircle.Root>
          )}
        </Button>
      </Flex>
    </form>
  )
}
