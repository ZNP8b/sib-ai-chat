import { useMutation } from '@tanstack/react-query'
import { api } from '@/api/api.ts'
import { AxiosResponse } from 'axios'
import { NvdCveResponse } from '@/components/capec-to-cve-components/types.tsx'
import * as yup from 'yup'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import { Dispatch, SetStateAction } from 'react'

export function useCVEForm() {
  const schema = yup.object({
    cweId: yup.string().required('Это поле обязательно для заполнения'),
  })

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm({
    resolver: yupResolver(schema),
  })

  return {
    register,
    handleSubmit,
    errors,
    setError,
  }
}

export function useCVEMutation(
  setCVEs: Dispatch<SetStateAction<NvdCveResponse | undefined>>,
) {
  const { setError } = useCVEForm()

  return useMutation({
    mutationFn: (cweId: string) => {
      return api.post('/get_nvd', { cwe_id: cweId })
    },
    onSuccess: (data: AxiosResponse<NvdCveResponse>) => {
      setCVEs(data.data)
    },
    onError: () => {
      setError('cweId', {
        type: 'custom',
        message: 'Произошла неизвестная ошибка.',
      })
    },
  })
}
